{"version":3,"sources":["SportsDataAccessors/NFLHelperOld.js","SportsDataAccessors/NFLHelper.ts","components/GameTable.tsx","uicomponents/MyCard.tsx","components/NFL.tsx","App.tsx","index.tsx"],"names":["helpers","isDaylightSavingsTimeOn","date","arguments","length","undefined","Date","jan","getFullYear","jul","stdTimezoneOffset","Math","max","getTimezoneOffset","etToUTC","setUTCHours","getHours","etUtcOffset","dateInPT","clientDate","utc","getTime","pacificTimeUTCOffset","toLocalTime","convertedDate","toLocaleTimeString","hour","minute","split","NFLData","getNFLData","_getNFLData","Object","asyncToGenerator","regenerator_default","a","mark","_callee","scores","combinedData","scorestrip","wrap","_context","prev","next","fetch","sent","json","this","combineNFLAPIData","t0","labelScheduleData","abrupt","stop","apply","primaryData","additionalData","gms","entries","map","_ref","_ref2","slicedToArray","key","g","eid","parseInt","additionalDataObj","i","gameScores","gameSchedule","gameId","v","extrainfo","w","week","oldData","data","game","qtr","includes","isNaN","playing","home","score","scoreTable","T","homeScore","visitorScore","away","home_winning","visitor_winning","posteam","abbr","home_pos","visitor_pos","hours","gameTimeEastern","mins","options","ampm","gameDate","toLocaleString","weekday","t","getMonth","getDate","concat","toString","substring","window","devEnv","fav_team","carryOverData","oldD","newD","newData","hidden","e","convertToTypes","unTypedData","schedule","displayDate","games","status","awayTeam","homeTeam","clock","visitorNickname","homeNickname","push","id","awayTeamWinning","homeTeamWinning","awayTeamScore","homeTeamScore","carryOverHiddenGames","cachedSchedule","cachedGame","filter","cg","typedData","typedDataWithHiddens","GameRow","removeGame","react","className","Button","outline","color","size","onClick","TableHeader","GameTable","Table","responsive","GameTable_TableHeader","index","GameTable_GameRow","MyCard","CardHeader","title","children","react_default","createElement","Card","CardBody","NFL","_useState","useState","_useState2","setSchedule","upDateSchedule","cachedScheduleString","localStorage","getItem","JSON","parse","_x","_fetchNFLDataAsync","fetchNFLDataAsync","then","setItem","stringify","useEffect","console","log","uicomponents_MyCard","removeItem","components_GameTable","newGames","App","ReactDOM","render","src_App","document","getElementById"],"mappings":"oOAAMA,EAAU,GASVC,EAA0B,WAAuB,IAAtBC,EAAsBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,IAAIG,KACrCC,EAAM,IAAID,KAAKJ,EAAKM,cAAe,EAAG,GACtCC,EAAM,IAAIH,KAAKJ,EAAKM,cAAe,EAAG,GAEtCE,EAAoBC,KAAKC,IAAIL,EAAIM,oBAAqBJ,EAAII,qBAGhE,OAF2BX,EAAKW,oBAAsBH,GA0BjDI,EAAU,SAACZ,GAEhB,OADAA,EAAKa,aAAab,EAAKc,WATJ,WAAuB,IAAtBd,EAAsBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,IAAIG,KAK/B,OAAOL,EAAwBC,GADR,EADA,EAMae,CAAYf,IAAS,IAClDA,GAeRF,EAAQkB,SAAW,WAA6B,IAA5BC,EAA4BhB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,IAAIG,KAC9Bc,EAAMD,EAAWE,UAA8C,IAAjCF,EAAWN,oBAE/C,OADoB,IAAIP,KAAKc,EAAO,KAdR,WAAuB,IAAtBlB,EAAsBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,IAAIG,KAGxC,OAAOL,EAAwBC,IADP,GAA2B,EAYLoB,CAAqBH,KASpEnB,EAAQuB,YAAc,SAACrB,GAAsB,IACxCsB,EAAgBtB,EADwBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,KAI3CqB,EAAgBV,EAAQU,IAIzB,OAAOA,EAAcC,mBAAmB,GADxB,CAAEC,KAAM,UAAWC,OAAQ,YACUC,MAAM,KAAK,IAGjE,IAmKeC,EAnKC,CACTC,WADS,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAA,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAN,EAAAC,EAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,aAGF,mDAHEF,EAAAE,KAAA,EAIcC,MADhB,oDAHE,cAAAH,EAAAE,KAAA,EAAAF,EAAAI,KAI0BC,OAJ1B,cAIRT,EAJQI,EAAAI,KAMVP,EAAe,GANLG,EAAAC,KAAA,EASO,6CATPD,EAAAE,KAAA,GAUmBC,MADZ,8CATP,eAAAH,EAAAE,KAAA,GAAAF,EAAAI,KAUuCC,OAVvC,QAUPP,EAVOE,EAAAI,KAWbP,EAAeS,KAAKC,kBAAkBX,EAAQE,GAXjCE,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAQ,GAAAR,EAAA,SAabH,EAAeS,KAAKC,kBAAkBX,EAAQ,MAbjC,eAgBdC,EAAeS,KAAKG,kBAAkBZ,GAhBxBG,EAAAU,OAAA,SAiBPb,GAjBO,yBAAAG,EAAAW,SAAAhB,EAAAW,KAAA,sCAAAjB,EAAAuB,MAAAN,KAAA7C,YAAA,GAoBf8C,kBApBe,SAoBGM,EAAaC,GAC9B,IAAMjB,EAAe,GAOrB,GANAA,EAAakB,IAAMzB,OAAO0B,QAAQH,GAAaI,IAAI,SAAAC,GAAkB,IAAAC,EAAA7B,OAAA8B,EAAA,EAAA9B,CAAA4B,EAAA,GAAhBG,EAAgBF,EAAA,GAC9DG,EAD8DH,EAAA,GAGpE,OADAG,EAAEC,IAAMC,SAASH,EAAK,IACfC,KAGHR,EACJ,OAAOjB,EAKR,IADA,IAAM4B,EAAoB,GACjBC,EAAI,EAAGA,EAAIZ,EAAea,WAAWjE,OAAQgE,GAAK,EAAG,CAC7D,IAAMJ,EAAIR,EAAea,WAAWD,GACpCD,EAAkBH,EAAEM,aAAaC,QAAUP,EAW5C,OARAzB,EAAakB,IAAMlB,EAAakB,IAAIE,IAAI,SAACa,GACxC,IAAMR,EAAIQ,EAEV,OADAR,EAAES,UAAYN,EAAkBH,EAAEC,KAC3BD,IAGRzB,EAAamC,EAAIlB,EAAemB,KAEzBpC,GAGRY,kBAlDe,SAkDGyB,GACjB,IAAMC,EAAOD,EAwFb,OAtFAC,EAAKpB,IAAMoB,EAAKpB,IAAIE,IAAI,SAACa,GACxB,IAAMM,EAAON,EAcb,IAXIM,EAAKC,KAAQD,EAAKC,IAAIC,SAAS,UAAaC,MAAMH,EAAKC,OAC1DD,EAAKI,SAAU,GAKW,OAAvBJ,EAAKK,KAAKC,MAAM,KACnBN,EAAKO,YAAa,GAIO,OAAtBP,EAAKK,KAAKC,MAAME,EAAY,CAC/B,IAAMC,EAAYrB,SAASY,EAAKK,KAAKC,MAAME,EAAG,IACxCE,EAAetB,SAASY,EAAKW,KAAKL,MAAME,EAAG,IAE7CC,EAAYC,IACfV,EAAKY,cAAe,GAEjBF,EAAeD,IAClBT,EAAKa,iBAAkB,GAczB,GATIb,EAAKI,SACRJ,EAAKc,UAAYd,EAAKK,KAAKU,KAC3Bf,EAAKgB,UAAW,EACNhB,EAAKI,SACfJ,EAAKc,UAAYd,EAAKW,KAAKI,OAC3Bf,EAAKiB,aAAc,GAIhBjB,EAAKL,UAAW,CACnB,IAAIuB,EAAQ9B,SAASY,EAAKL,UAAUH,aAAa2B,gBAAgBrE,MAAM,KAAK,GAAI,IAC1EsE,EAAOhC,SAASY,EAAKL,UAAUH,aAAa2B,gBAAgBrE,MAAM,KAAK,GAAI,IAE3EuE,EAAU,GAEfA,EAAQC,KADLJ,GAAS,GAAKA,GAAS,GACX,KAEA,KAIK,OAAjBG,EAAQC,MAAiBJ,EAAQ,GACpCA,GAAS,GACkB,OAAjBG,EAAQC,MAA2B,KAAVJ,IACnCA,EAAQ,GAGT,IAAMK,EAAW,IAAI/F,KAAKwE,EAAKL,UAAUH,aAAa+B,UACtDvB,EAAKL,UAAUH,aAAa+B,SAAWA,EAASC,eAAe,QAAS,CAAEC,QAAS,UAEnFzB,EAAK0B,EAAIxG,EAAQuB,YAChB,IAAIjB,KAAK+F,EAAS7F,cAAe6F,EAASI,WAAYJ,EAASK,UAAWV,EAAOE,SAGlFpB,EAAK0B,EAAL,GAAAG,OAAY7B,EAAKb,IAAI2C,WAAWC,UAAU,EAAG,GAA7C,KAAAF,OAAmD7B,EAAKb,IAAI2C,WAAWC,UAAU,EAAG,IAqBrF,MAfiB,mBAAb/B,EAAKC,IAERD,EAAKC,IAAM,WACY,YAAbD,EAAKC,MAEfD,EAAKC,IAAL,GAAA4B,OAAc7B,EAAKL,UAAUH,aAAa+B,SAA1C,KAAAM,OAAsD7B,EAAK0B,IAGxDM,OAAOC,SACa,OAAnBjC,EAAKK,KAAKU,MAAoC,OAAnBf,EAAKW,KAAKI,MACrB,OAAnBf,EAAKK,KAAKU,MAAoC,OAAnBf,EAAKW,KAAKI,OACrCf,EAAKkC,UAAW,IAIXlC,IAGDD,GAGRoC,cA9Ie,SA8IDC,EAAMC,GACnB,IAAMvC,EAAUsC,EACVE,EAAUD,EAEhB,IAEC,GAAIvC,GAAWA,EAAQnB,KAAOmB,EAAQF,IAAM0C,EAAQ1C,EACnD,IAAK,IAAIN,EAAI,EAAGA,EAAIgD,EAAQ3D,IAAIrD,QAAUwE,EAAQnB,IAAIrD,OAAQgE,GAAK,EAC9DgD,EAAQ3D,IAAIW,GAAGH,MAAQW,EAAQnB,IAAIW,GAAGH,KAAOW,EAAQnB,IAAIW,GAAGiD,SAC/DD,EAAQ3D,IAAIW,GAAGiD,QAAS,GAI1B,MAAOC,IAIT,OAAOF,IC3OT,SAASG,EAAeC,GACtB,IAAMC,EAAoB,CACxBC,YAAW,QAAAf,OAAUa,EAAY9C,GACjCiD,MAAO,IAoDT,OAjDAH,EAAY/D,IAAIE,IAAI,SAACK,GACnB,IAAI4D,EAeAC,EAOAC,EAwBJ,OA3CIF,EAFA5D,EAAEe,IACAf,EAAEkB,QACE,GAAAyB,OAAM3C,EAAEe,IAAR,OAAA4B,OAAiB3C,EAAE+D,OAEhB/D,EAAEe,IAGTf,EAAES,UACE,GAAAkC,OAAM3C,EAAES,UAAUH,aAAa+B,SAA/B,KAAAM,OAA2C3C,EAAEwC,GAE1CxC,EAAEwC,EAMbqB,EADE7D,EAAES,UACOT,EAAES,UAAUH,aAAa0D,gBAEzBhE,EAAEyB,KAAKI,KAKlBiC,EADE9D,EAAES,UACOT,EAAES,UAAUH,aAAa2D,aAEzBjE,EAAEmB,KAAKU,KAGhB7B,EAAE+B,cAAe8B,EAAQ,GAAAlB,OAAMkB,EAAN,kBACzB7D,EAAE8B,WAAYgC,EAAQ,GAAAnB,OAAMmB,EAAN,kBAE1BL,EAASE,MAAMO,KACb,CACEC,GAAInE,EAAEC,IACN2D,OAAQA,EACRC,SAAUA,EACVC,SAAUA,EACVM,gBAAiBpE,EAAE2B,gBACnB0C,gBAAiBrE,EAAE0B,aACnB4C,cAAetE,EAAEyB,KAAKL,MAAME,EAC5BiD,cAAevE,EAAEmB,KAAKC,MAAME,EAC5B+B,QAAQ,IAILrD,IAEFyD,EAGT,SAASe,EAAqBf,EAAoBgB,GAChD,OAAIhB,EAASC,cAAgBe,EAAef,YAAoBD,GAEhEA,EAASE,MAAMhE,IAAI,SAACK,EAAGI,GAKrB,IAAMsE,EAAaD,EAAed,MAAMgB,OAAO,SAAAC,GAAE,OAAIA,EAAGT,KAAOnE,EAAEmE,KAAI,GAKrE,OAJIO,IAAY1E,EAAEqD,OAASqB,EAAWrB,QAI/BrD,IAGFyD,8CAGF,SAAApF,EAAiCoG,GAAjC,IAAAjB,EAAAqB,EAAAC,EAAA,OAAA5G,EAAAC,EAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACqBf,EAAQC,aAD7B,UACC0F,EADD9E,EAAAI,KAEC+F,EAAYtB,EAAeC,GAE5BiB,EAJA,CAAA/F,EAAAE,KAAA,eAAAF,EAAAU,OAAA,SAIuByF,GAJvB,cAMCC,EAAuBN,EAAqBK,EAAWJ,GANxD/F,EAAAU,OAAA,SAOE0F,GAPF,wBAAApG,EAAAW,SAAAhB,iDC5ED0G,EAAU,SAAAnF,GAA4E,IAAzEkB,EAAyElB,EAAzEkB,KAAMkE,EAAmEpF,EAAnEoF,WAGvB,OACEC,EAAA,wBACEA,EAAA,wBAAKnE,EAAK8C,QAEVqB,EAAA,oBAAIC,UAAWpE,EAAKsD,gBAAkB,eAAiB,IACpDtD,EAAK+C,UAGRoB,EAAA,oBAAIC,UAAWpE,EAAKuD,gBAAkB,eAAiB,IACpDvD,EAAKgD,UAGRmB,EAAA,wBAAKnE,EAAKwD,eACVW,EAAA,wBAAKnE,EAAKyD,eAEVU,EAAA,wBACEA,EAAA,cAACE,EAAA,EAAD,CAAQC,SAAS,EAAMC,MAAM,YAAYC,KAAK,KAAKC,QAlBrC,kBAAMP,EAAWlE,EAAKqD,MAkBpC,aAMFqB,EAAc,kBAClBP,EAAA,2BACEA,EAAA,wBACEA,EAAA,yBACAA,EAAA,gCACAA,EAAA,iCACAA,EAAA,6BACAA,EAAA,6BACAA,EAAA,4BAkBSQ,EAbG,SAAA5F,GAAA,IAAG8D,EAAH9D,EAAG8D,MAAOqB,EAAVnF,EAAUmF,WAAV,OAChBC,EAAA,cAACS,EAAA,EAAD,CAAOC,YAAU,EAACL,KAAK,MACrBL,EAAA,cAACW,EAAD,MACAX,EAAA,2BAEItB,EACGgB,OAAO,SAAA7D,GAAI,OAAKA,EAAKuC,SACrB1D,IAAI,SAACmB,EAAM+E,GAAP,OAAiBZ,EAAA,cAACa,EAAD,CAAS/F,IAAK8F,EAAO/E,KAAMA,EAAMkE,WAAYA,iCClC9De,GAHaC,IATkB,SAAApG,GAAwB,IAArBqG,EAAqBrG,EAArBqG,MAAOC,EAActG,EAAdsG,SACtD,OACEC,EAAAhI,EAAAiI,cAACC,EAAA,EAAD,KACEF,EAAAhI,EAAAiI,cAACJ,EAAA,EAAD,KAAaC,GACbE,EAAAhI,EAAAiI,cAACE,EAAA,EAAD,KAAWJ,MCAF,SAASK,IACtB,IAD4BC,EAGIC,mBAAmB,CACjD/C,YAAa,GACbC,MAAO,KALmB+C,EAAA1I,OAAA8B,EAAA,EAAA9B,CAAAwI,EAAA,GAGrB/C,EAHqBiD,EAAA,GAGXC,EAHWD,EAAA,GAQtBE,EAAiB,WACrB,IAAInC,EACEoC,EAAuBC,aAAaC,QATlB,qBAUpBF,IACFpC,EAAiBuC,KAAKC,MAAMJ,KACRF,EAAYlC,GH4D/B,SAAPyC,GAAA,OAAAC,EAAA7H,MAAAN,KAAA7C,WGzDIiL,CAAkB3C,GAAgB4C,KAAK,SAAA5D,GACrCkD,EAAYlD,GACZqD,aAAaQ,QAjBS,oBAiBkBN,KAAKO,UAAU9D,OAS3D+D,oBAAU,WACRZ,KACC,IAeH,OADAa,QAAQC,IAAI,gBAEVvB,EAAAhI,EAAAiI,cAACuB,EAAD,CACE1B,MACEE,EAAAhI,EAAAiI,cAAA,sBACU3C,EAASC,YACjByC,EAAAhI,EAAAiI,cAACjB,EAAA,EAAD,CAAQC,SAAO,EAACE,KAAK,KAAKJ,UAAU,cAAcK,QA3BpC,WACpBuB,aAAac,WAtBW,qBAuBxBhB,MAyBM,WAKJT,EAAAhI,EAAAiI,cAACyB,EAAD,CAAWlE,MAAOF,EAASE,MAAOqB,WAvBnB,SAACb,GAClB,IAAM2D,EAAWrE,EAASE,MAAMhE,IAAI,SAAAmB,GAIlC,OAHIA,EAAKqD,KAAOA,IACdrD,EAAKuC,QAAS,GAETvC,IAGT6F,EAAY,CAAEjD,YAAaD,EAASC,YAAaC,MAAOmE,IACxDhB,aAAaQ,QAvCW,oBAuCgBN,KAAKO,UAAU9D,QC/B5CsE,MAZf,WACE,OACE5B,EAAAhI,EAAAiI,cAAA,OAAKlB,UAAU,OACbiB,EAAAhI,EAAAiI,cAAA,OAAKlB,UAAU,mBACbiB,EAAAhI,EAAAiI,cAAA,OAAKlB,UAAU,gBACbiB,EAAAhI,EAAAiI,cAACG,EAAD,gBCJVyB,IAASC,OAAO9B,EAAAhI,EAAAiI,cAAC8B,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.dd24b0e0.chunk.js","sourcesContent":["const helpers = {}; // eslint-disable-line no-unused-vars\n\n/**\n * @param {Date} [date=(new Date())] - date on which to determine if DST is on\n * @returns {boolean} isDaylightSavingsOn\n *\n * https://stackoverflow.com/questions/11887934/how-to-check-if-the-dst-daylight-saving-time-is-in-effect-and-if-it-is-whats\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset\n */\nconst isDaylightSavingsTimeOn = (date = new Date()) => {\n\tconst jan = new Date(date.getFullYear(), 0, 1);\n\tconst jul = new Date(date.getFullYear(), 6, 1);\n\n\tconst stdTimezoneOffset = Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());\n\tconst dalightSavingsTime = date.getTimezoneOffset() < stdTimezoneOffset;\n\n\treturn dalightSavingsTime;\n};\n\n/**\n * Calculates offset between [US East Coast (EST or EDT)] and [UTC]\n *\n * To determine if the US East coast is in either\n * EST (Eastern Standard Time) or EDT (Eastern Daylight Savings Time)\n * the function first determines if day light savings time is on\n *\n * https://www.timeanddate.com/time/zones/est\n * https://www.timeanddate.com/time/zones/edt\n *\n * @param {Date} [date=(new Date())] - date on which to calculate offset\n * @returns {number} offset (4 or 5)\n */\nconst etUtcOffset = (date = new Date()) => {\n\t// EST + 5 = UTC\n\t// EDT + 4 = UTC\n\tconst EST_UTC_OFFSET = 5;\n\tconst EDT_UTC_OFFSET = 4;\n\treturn isDaylightSavingsTimeOn(date) ? EDT_UTC_OFFSET : EST_UTC_OFFSET;\n};\n\nconst etToUTC = (date) => {\n\tdate.setUTCHours((date.getHours() + etUtcOffset(date)) % 24);\n\treturn date;\n};\n\nconst pacificTimeUTCOffset = (date = new Date()) => {\n\t// PST -8 = UTC // PDT -7 = UTC\n\tconst PDT_UTC_OFFSET = -7; const PST_UTC_OFFSET = -8;\n\treturn isDaylightSavingsTimeOn(date) ? PDT_UTC_OFFSET : PST_UTC_OFFSET;\n};\n\n/**\n * https://stackoverflow.com/a/9070729\n *\n * @param {Date} clientDate\n * @returns {Date} dateInPT\n */\nhelpers.dateInPT = (clientDate = new Date()) => {\n\tconst utc = clientDate.getTime() + (clientDate.getTimezoneOffset() * 60000);\n\tconst pacificTime = new Date(utc + (3600000 * pacificTimeUTCOffset(clientDate)));\n\treturn pacificTime;\n};\n\n/**\n * Convert date in EST/EDT or UTC to user (current system) local time\n * @param {Date} date\n * @param {boolean} utc - has to be UTC || (EST/EDT)\n */\nhelpers.toLocalTime = (date, utc = false) => {\n\tlet convertedDate = date;\n\n\tif (!utc) {\n\t\tconvertedDate = etToUTC(convertedDate);\n\t}\n\n\tconst options = { hour: '2-digit', minute: '2-digit' };\n\treturn convertedDate.toLocaleTimeString([], options).split(' ')[0];\n};\n\nconst NFLData = { // eslint-disable-line no-unused-vars\n\tasync getNFLData() {\n\t\t// get main data\n\t\tconst url = 'http://www.nfl.com/liveupdate/scores/scores.json';\n\t\tconst scores = await (await fetch(url)).json();\n\n\t\tlet combinedData = {};\n\t\ttry {\n\t\t\t// get additional data\n\t\t\tconst specificUrl = 'https://feeds.nfl.com/feeds-rs/scores.json';\n\t\t\tconst scorestrip = await (await fetch(specificUrl)).json();\n\t\t\tcombinedData = this.combineNFLAPIData(scores, scorestrip);\n\t\t} catch (e) {\n\t\t\tcombinedData = this.combineNFLAPIData(scores, null);\n\t\t}\n\n\t\tcombinedData = this.labelScheduleData(combinedData);\n\t\treturn combinedData;\n\t},\n\n\tcombineNFLAPIData(primaryData, additionalData) {\n\t\tconst combinedData = {};\n\t\tcombinedData.gms = Object.entries(primaryData).map(([key, value]) => {\n\t\t\tconst g = value;\n\t\t\tg.eid = parseInt(key, 10);\n\t\t\treturn g;\n\t\t});\n\n\t\tif (!additionalData) {\n\t\t\treturn combinedData;\n\t\t}\n\n\t\t// convert ss.json games array to object\n\t\tconst additionalDataObj = {};\n\t\tfor (let i = 0; i < additionalData.gameScores.length; i += 1) {\n\t\t\tconst g = additionalData.gameScores[i];\n\t\t\tadditionalDataObj[g.gameSchedule.gameId] = g;\n\t\t}\n\n\t\tcombinedData.gms = combinedData.gms.map((v) => {\n\t\t\tconst g = v;\n\t\t\tg.extrainfo = additionalDataObj[g.eid];\n\t\t\treturn g;\n\t\t});\n\n\t\tcombinedData.w = additionalData.week;\n\n\t\treturn combinedData;\n\t},\n\n\tlabelScheduleData(oldData) {\n\t\tconst data = oldData;\n\n\t\tdata.gms = data.gms.map((v) => {\n\t\t\tconst game = v;\n\n\t\t\t// if (!isNaN(schedule.gms[i].extrainfo.q) || schedule.gms[i].extrainfo.q === 'P') {\n\t\t\tif (game.qtr && !game.qtr.includes('Final') && !isNaN(game.qtr)) {\n\t\t\t\tgame.playing = true;\n\t\t\t}\n\n\t\t\t// can't check for score table in handlebars, because it 0 is a valid entry,\n\t\t\t// but if(0) is false\n\t\t\tif (game.home.score[1] !== null) {\n\t\t\t\tgame.scoreTable = true;\n\t\t\t}\n\n\t\t\t// label whos winning\n\t\t\tif (game.home.score.T !== null) {\n\t\t\t\tconst homeScore = parseInt(game.home.score.T, 10);\n\t\t\t\tconst visitorScore = parseInt(game.away.score.T, 10);\n\n\t\t\t\tif (homeScore > visitorScore) {\n\t\t\t\t\tgame.home_winning = true;\n\t\t\t\t}\n\t\t\t\tif (visitorScore > homeScore) {\n\t\t\t\t\tgame.visitor_winning = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// who has possession\n\t\t\tif (game.playing &&\n\t\t\t\tgame.posteam === game.home.abbr) {\n\t\t\t\tgame.home_pos = true;\n\t\t\t} else if (game.playing &&\n\t\t\t\tgame.posteam === game.away.abbr) {\n\t\t\t\tgame.visitor_pos = true;\n\t\t\t}\n\n\t\t\t// local time\n\t\t\tif (game.extrainfo) {\n\t\t\t\tlet hours = parseInt(game.extrainfo.gameSchedule.gameTimeEastern.split(':')[0], 10);\n\t\t\t\tconst mins = parseInt(game.extrainfo.gameSchedule.gameTimeEastern.split(':')[1], 10);\n\n\t\t\t\tconst options = {};\n\t\t\t\tif (hours >= 0 && hours <= 10) {\n\t\t\t\t\toptions.ampm = 'PM';\n\t\t\t\t} else {\n\t\t\t\t\toptions.ampm = 'AM';\n\t\t\t\t}\n\n\t\t\t\t// convert to 24 hours if need to (and provide AM/PM)\n\t\t\t\tif (options.ampm === 'PM' && hours < 12) {\n\t\t\t\t\thours += 12;\n\t\t\t\t} else if (options.ampm === 'AM' && hours === 12) {\n\t\t\t\t\thours = 0;\n\t\t\t\t}\n\n\t\t\t\tconst gameDate = new Date(game.extrainfo.gameSchedule.gameDate);\n\t\t\t\tgame.extrainfo.gameSchedule.gameDate = gameDate.toLocaleString('en-us', { weekday: 'short' });\n\n\t\t\t\tgame.t = helpers.toLocalTime(\n\t\t\t\t\tnew Date(gameDate.getFullYear(), gameDate.getMonth(), gameDate.getDate(), hours, mins),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tgame.t = `${game.eid.toString().substring(4, 6)}.${game.eid.toString().substring(6, 8)}`;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * tweaking game.qtr looks\n\t\t\t */\n\t\t\tif (game.qtr === 'final overtime') {\n\t\t\t\t// overtime makes column too long\n\t\t\t\tgame.qtr = 'final OT';\n\t\t\t} else if (game.qtr === 'Pregame') {\n\t\t\t\t// pregame is useless info\n\t\t\t\tgame.qtr = `${game.extrainfo.gameSchedule.gameDate} ${game.t}`;\n\t\t\t}\n\n\t\t\tif (window.devEnv) {\n\t\t\t\tif (game.home.abbr === 'SF' || game.away.abbr === 'SF' ||\n\t\t\t\t\tgame.home.abbr === 'NE' || game.away.abbr === 'NE') {\n\t\t\t\t\tgame.fav_team = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn game;\n\t\t});\n\n\t\treturn data;\n\t},\n\n\tcarryOverData(oldD, newD) {\n\t\tconst oldData = oldD;\n\t\tconst newData = newD;\n\n\t\ttry {\n\t\t\t// if data is for the same week, carry over any data that I need to\n\t\t\tif (oldData && oldData.gms && oldData.w === newData.w) {\n\t\t\t\tfor (let i = 0; i < newData.gms.length && oldData.gms.length; i += 1) {\n\t\t\t\t\tif (newData.gms[i].eid === oldData.gms[i].eid && oldData.gms[i].hidden) {\n\t\t\t\t\t\tnewData.gms[i].hidden = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// don't carry anything over\n\t\t}\n\n\t\treturn newData;\n\t},\n};\n\nexport default NFLData;\n","import { Schedule } from './types';\nimport NFLData from './NFLHelperOld';\n\nfunction convertToTypes(unTypedData: any) {\n  const schedule:Schedule = {\n    displayDate: `Week ${unTypedData.w}`,\n    games: []\n  };\n\n  unTypedData.gms.map((g:any) => {\n    let status: string;\n    if (g.qtr) {\n      if (g.playing) {\n        status = `${g.qtr}Q, ${g.clock}`;\n      } else {\n        status = g.qtr;\n      }\n    } else {\n      if (g.extrainfo) {\n        status = `${g.extrainfo.gameSchedule.gameDate} ${g.t}`;\n      } else {\n        status = g.t;\n      }\n    }\n\n    let awayTeam: string;\n    if (g.extrainfo) {\n      awayTeam = g.extrainfo.gameSchedule.visitorNickname;\n    } else {\n      awayTeam = g.away.abbr;\n    }\n\n    let homeTeam: string;\n    if (g.extrainfo) {\n      homeTeam = g.extrainfo.gameSchedule.homeNickname;\n    } else {\n      homeTeam = g.home.abbr;\n    }\n\n    if (g.visitor_pos) { awayTeam = `${awayTeam} 🏈` } // TODO remove\n    if (g.home_pos) { homeTeam = `${homeTeam} 🏈` } // TODO remove\n\n    schedule.games.push(\n      {\n        id: g.eid,\n        status: status,\n        awayTeam: awayTeam,\n        homeTeam: homeTeam,\n        awayTeamWinning: g.visitor_winning,\n        homeTeamWinning: g.home_winning,\n        awayTeamScore: g.away.score.T,\n        homeTeamScore: g.home.score.T,\n        hidden: false\n      }\n    );\n\n    return g;\n  });\n  return schedule;\n}\n\nfunction carryOverHiddenGames(schedule: Schedule, cachedSchedule: Schedule) {\n  if (schedule.displayDate !== cachedSchedule.displayDate) return schedule;\n\n  schedule.games.map((g, i) => {\n    // if (g.id !== cachedSchedule.games[i].id)\n    // g.hidden = cachedSchedule.games[i].hidden;\n\n    // shouldn't this be of type Game | undefined\n    const cachedGame = cachedSchedule.games.filter(cg => cg.id === g.id)[0];\n    if (cachedGame) g.hidden = cachedGame.hidden;\n\n    // need a better way to do this\n\n    return g;\n  });\n\n  return schedule;\n}\n\nexport async function fetchNFLDataAsync(cachedSchedule: Schedule|undefined): Promise<Schedule> {\n  const unTypedData = await NFLData.getNFLData();\n  const typedData = convertToTypes(unTypedData);\n\n  if (!cachedSchedule) return typedData;\n\n  const typedDataWithHiddens = carryOverHiddenGames(typedData, cachedSchedule);\n  return typedDataWithHiddens;\n}\n","import * as React from 'react';\nimport { Button, Table } from 'reactstrap';\nimport { Game } from '../SportsDataAccessors/types';\n\nconst GameRow = ({ game, removeGame }: { game: Game, removeGame: (id: number) => void }) => {\n  const handleClick = () => removeGame(game.id);\n\n  return (\n    <tr>\n      <td>{game.status}</td>\n\n      <td className={game.awayTeamWinning ? 'winning_team' : ''}>\n        {game.awayTeam}\n      </td>\n\n      <td className={game.homeTeamWinning ? 'winning_team' : ''}>\n        {game.homeTeam}\n      </td>\n\n      <td>{game.awayTeamScore}</td>\n      <td>{game.homeTeamScore}</td>\n\n      <td>\n        <Button outline={true} color=\"secondary\" size=\"sm\" onClick={handleClick}>&#9587;</Button>\n      </td>\n    </tr>\n  );\n}\n\nconst TableHeader = () => (\n  <thead>\n    <tr>\n      <th/>{/* status */}\n      <th>away</th>\n      <th>@home</th>\n      <th>a</th>\n      <th>h</th>\n      <th/>{/* X */}\n    </tr>\n  </thead>\n);\n\nconst GameTable = ({ games, removeGame }: { games: Game[], removeGame: (id: number) => void }) => (\n  <Table responsive size=\"sm\">\n    <TableHeader />\n    <tbody>\n      {\n        games\n          .filter(game => !game.hidden)\n          .map((game, index) => <GameRow key={index} game={game} removeGame={removeGame} />)\n      }\n    </tbody>\n  </Table>\n);\n\nexport default GameTable;\n","import React, { ReactNode } from 'react';\nimport { Card, CardBody, CardHeader } from 'reactstrap';\n\nconst MyCard:React.FC<{ title: ReactNode }> = ({ title, children}) => {\n  return (\n    <Card>\n      <CardHeader>{title}</CardHeader>\n      <CardBody>{children}</CardBody>\n    </Card>\n  );\n}\n\nexport const MyCardHeader = CardHeader;\n// export const MyCardBody = CardBody;\n\nexport default MyCard;\n","import React, { useEffect, useState } from 'react';\nimport { fetchNFLDataAsync } from '../SportsDataAccessors/NFLHelper';\nimport { Schedule } from '../SportsDataAccessors/types';\nimport GameTable from './GameTable';\nimport MyCard from '../uicomponents/MyCard';\nimport { Button } from 'reactstrap';\n\nexport default function NFL() {\n  const LOCAL_STORAGE_KEY = 'nfl-schedule-data';\n\n  const [schedule, setSchedule] = useState<Schedule>({\n    displayDate: '',\n    games: [],\n  });\n\n  const upDateSchedule = () => {\n    let cachedSchedule: Schedule | undefined;\n    const cachedScheduleString = localStorage.getItem(LOCAL_STORAGE_KEY);\n    if (cachedScheduleString) {\n      cachedSchedule = JSON.parse(cachedScheduleString);\n      if (cachedSchedule) setSchedule(cachedSchedule);\n    }\n\n    fetchNFLDataAsync(cachedSchedule).then(schedule => {\n      setSchedule(schedule);\n      localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(schedule));\n    });\n  }\n\n  const resetSchedule = () => {\n    localStorage.removeItem(LOCAL_STORAGE_KEY);\n    upDateSchedule();\n  }\n\n  useEffect(() => {\n    upDateSchedule();\n  }, []);\n\n  const removeGame = (id: number) => {\n    const newGames = schedule.games.map(game => {\n      if (game.id === id) {\n        game.hidden = true;\n      }\n      return game;\n    });\n\n    setSchedule({ displayDate: schedule.displayDate, games: newGames });\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(schedule));\n  }\n\n  console.log('rendering...');\n  return (\n    <MyCard\n      title={\n        <span>\n          NFL // {schedule.displayDate}\n          <Button outline size=\"sm\" className=\"float-right\" onClick={resetSchedule}>Reset</Button>\n        </span>\n      }\n    >\n\n      <GameTable games={schedule.games} removeGame={removeGame} />\n    </MyCard>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport NFL from './components/NFL';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container-fluid\">\n        <div className=\"card-columns\">\n          <NFL />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}